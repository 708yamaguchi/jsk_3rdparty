Index: src/nodes/image_saver.cpp
===================================================================
--- src/nodes/image_saver.cpp	(リビジョン 39154)
+++ src/nodes/image_saver.cpp	(作業コピー)
@@ -3,25 +3,43 @@
 
 #include <ros/ros.h>
 #include <cv_bridge/CvBridge.h>
-#include <image_transport/image_transport.h>
-#include <camera_calibration_parsers/parse.h>
 #include <boost/format.hpp>
 
+#include "image_view/SaveImage.h"
+
 sensor_msgs::CvBridge g_bridge;
 int g_count = 0;
 boost::format g_format;
+sensor_msgs::ImageConstPtr last_img;
+std::string ff_param, dn_param, sai_param;
+bool save_all_img;
+std::string format_string;
+std::string dir_string;
 
-void callback(const sensor_msgs::ImageConstPtr& image, const sensor_msgs::CameraInfoConstPtr& info)
-{
-  if (g_bridge.fromImage(*image, "bgr8")) {
+void save_img(const sensor_msgs::ImageConstPtr& image, std::string fname="", std::string dir="", std::string enc=""){
+  std::string filename;
+  if (dir == ""){
+    ros::param::get(dn_param, dir_string);
+    dir = dir_string;
+  }
+  if (fname == ""){
+    ros::param::get(ff_param, format_string);
+    fname = format_string;
+    g_format.parse(dir + "/" + fname);
+    filename = (g_format % g_count).str();
+  } else {
+    filename = dir + "/" + fname;
+  }
+
+  if (enc==""){
+    enc = image->encoding;
+  }
+
+  if (g_bridge.fromImage(*image,enc)) {
     IplImage *image = g_bridge.toIpl();
     if (image) {
-      std::string filename = (g_format % g_count % "jpg").str();
       cvSaveImage(filename.c_str(), image);
       ROS_INFO("Saved image %s", filename.c_str());
-      filename = (g_format % g_count % "ini").str();
-      camera_calibration_parsers::writeCalibration(filename, "camera", *info);
-      
       g_count++;
     } else {
       ROS_WARN("Couldn't save image, no data!");
@@ -31,14 +49,44 @@
     ROS_ERROR("Unable to convert %s image to bgr8", image->encoding.c_str());
 }
 
+void callback(const sensor_msgs::ImageConstPtr& image)
+{
+  ros::param::get(sai_param, save_all_img);
+  
+  if (save_all_img){
+    save_img(image);
+  }
+  last_img = image;
+  return;
+}
+
+bool srv_cb(image_view::SaveImage::Request &req,
+            image_view::SaveImage::Response &res){
+  if(last_img){
+    save_img(last_img, req.filename, req.directory, req.encoding);
+    res.result = true;
+    return true;
+  }
+  res.result = false;
+  return false;
+}
+
 int main(int argc, char** argv)
 {
   ros::init(argc, argv, "image_saver", ros::init_options::AnonymousName);
   ros::NodeHandle nh;
-  g_format.parse("left%04i.%s");
-  image_transport::ImageTransport it(nh);
-  std::string topic = nh.resolveName("image");
-  image_transport::CameraSubscriber sub = it.subscribeCamera(topic, 1, &callback);
+  
+  ff_param = nh.resolveName("filename_format");
+  dn_param = nh.resolveName("directory_name");
+  sai_param = nh.resolveName("save_all_subscribed_image");
 
+  nh.param(ff_param, format_string, std::string("frame%04i.jpg"));
+  nh.param(dn_param, dir_string, std::string(""));
+  nh.param(sai_param, save_all_img, false);
+  
+  ros::Subscriber sub = nh.subscribe(nh.resolveName("image"), 1, &callback);
+
+  ros::ServiceServer service = nh.advertiseService ("save_image", srv_cb);
+
   ros::spin();
 }
Index: srv/SaveImage.srv
===================================================================
--- srv/SaveImage.srv	(リビジョン 0)
+++ srv/SaveImage.srv	(リビジョン 0)
@@ -0,0 +1,5 @@
+string filename
+string directory
+string encoding
+---
+bool result
\ No newline at end of file
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(リビジョン 39154)
+++ CMakeLists.txt	(作業コピー)
@@ -20,6 +20,8 @@
 
 rosbuild_add_boost_directories()
 
+rosbuild_gensrv()
+
 # Nodelet library
 rosbuild_add_library(image_view src/nodelets/image_nodelet.cpp src/nodelets/disparity_nodelet.cpp src/nodelets/window_thread.cpp)
 target_link_libraries(image_view ${GTK_LIBRARIES})
