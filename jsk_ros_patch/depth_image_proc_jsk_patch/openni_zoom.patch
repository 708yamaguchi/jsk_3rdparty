diff -r d8164bcedd91 depth_image_proc/CMakeLists.txt
--- a/depth_image_proc/CMakeLists.txt	Fri Jan 13 16:29:51 2012 -0800
+++ b/depth_image_proc/CMakeLists.txt	Thu Jul 12 20:50:41 2012 +0900
@@ -16,7 +16,7 @@
 #set the default path for built libraries to the "lib" directory
 set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 
-rosbuild_add_library(depth_image_proc src/nodelets/convert_metric.cpp src/nodelets/disparity.cpp src/nodelets/point_cloud_xyz.cpp src/nodelets/point_cloud_xyzrgb.cpp src/nodelets/register.cpp)
+rosbuild_add_library(depth_image_proc src/nodelets/convert_metric.cpp src/nodelets/disparity.cpp src/nodelets/point_cloud_xyz.cpp src/nodelets/point_cloud_xyzrgb.cpp src/nodelets/register.cpp src/nodelets/undistort.cpp)
 
 #common commands for building c++ executables and libraries
 #rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
diff -r d8164bcedd91 depth_image_proc/nodelet_plugins.xml
--- a/depth_image_proc/nodelet_plugins.xml	Fri Jan 13 16:29:51 2012 -0800
+++ b/depth_image_proc/nodelet_plugins.xml	Thu Jul 12 20:50:41 2012 +0900
@@ -40,4 +40,12 @@
     </description>
   </class>
 
+  <class name="depth_image_proc/undistort"
+	 type="depth_image_proc::UndistortNodelet"
+	 base_class_type="nodelet::Nodelet">
+    <description>
+      Nodelet to undistort image with zoom fitting parameters
+    </description>
+  </class>
+
 </library>
diff -r d8164bcedd91 depth_image_proc/src/nodelets/undistort.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/depth_image_proc/src/nodelets/undistort.cpp	Thu Jul 12 20:50:41 2012 +0900
@@ -0,0 +1,111 @@
+#include <ros/ros.h>
+#include <nodelet/nodelet.h>
+#include <image_transport/image_transport.h>
+#include <sensor_msgs/image_encodings.h>
+
+namespace depth_image_proc {
+
+namespace enc = sensor_msgs::image_encodings;
+
+#define SHIFT_SCALE 0.125
+
+class UndistortNodelet : public nodelet::Nodelet
+{
+  // Subscriptions
+  boost::shared_ptr<image_transport::ImageTransport> it_;
+  image_transport::CameraSubscriber sub_camera_;
+  
+  // Publications
+  boost::mutex connect_mutex_;
+  image_transport::Publisher pub_depth_;
+
+  virtual void onInit();
+
+  void connectCb();
+
+  void depthCb(const sensor_msgs::ImageConstPtr& raw_msg,
+               const sensor_msgs::CameraInfoConstPtr& inf_msg);
+};
+
+void UndistortNodelet::onInit()
+{
+  ros::NodeHandle& nh = getNodeHandle();
+  it_.reset(new image_transport::ImageTransport(nh));
+
+  // Monitor whether anyone is subscribed to the output
+  image_transport::SubscriberStatusCallback connect_cb = boost::bind(&UndistortNodelet::connectCb, this);
+  // Make sure we don't enter connectCb() between advertising and assigning to pub_depth_
+  boost::lock_guard<boost::mutex> lock(connect_mutex_);
+  pub_depth_ = it_->advertise("image_fitted", 1, connect_cb, connect_cb);
+}
+
+// Handles (un)subscribing when clients (un)subscribe
+void UndistortNodelet::connectCb()
+{
+  boost::lock_guard<boost::mutex> lock(connect_mutex_);
+  if (pub_depth_.getNumSubscribers() == 0)
+  {
+    sub_camera_.shutdown();
+  }
+  else if (!sub_camera_)
+  {
+    sub_camera_ = it_->subscribeCamera("image_raw", 5, &UndistortNodelet::depthCb, this);
+  }
+}
+
+void UndistortNodelet::depthCb(const sensor_msgs::ImageConstPtr& input_msg,
+                                 const sensor_msgs::CameraInfoConstPtr& info_msg)
+{
+  // Allocate new Image message
+  sensor_msgs::ImagePtr depth_msg( new sensor_msgs::Image );
+  depth_msg->header   = input_msg->header;
+  depth_msg->encoding = input_msg->encoding;
+  depth_msg->height   = input_msg->height;
+  depth_msg->width    = input_msg->width;
+  depth_msg->step     = input_msg->step;
+  depth_msg->data.resize( depth_msg->height * depth_msg->step);
+
+  //float bad_point = std::numeric_limits<float>::quiet_NaN ();
+
+  const uint16_t* input_data = reinterpret_cast<const uint16_t*>(&input_msg->data[0]);
+  uint16_t* depth_data = reinterpret_cast<uint16_t*>(&depth_msg->data[0]);
+  double u_coeff, v_coeff, disp_coeff, shift_offset;
+  if(!ros::param::get ("/projector_coefficients/u_coeff", u_coeff)){
+    u_coeff = 0.0;
+  }
+  if(!ros::param::get ("/projector_coefficients/v_coeff", v_coeff)){
+    v_coeff = 0.0;
+  }
+  if(!ros::param::get ("/projector_coefficients/disp_coeff", disp_coeff)){
+    disp_coeff = 1.0;
+  }    
+  if(!ros::param::get ("/projector_coefficients/shift_offset", shift_offset)){
+    shift_offset = 1088.6594;
+  }    
+
+  float cx = info_msg->K[2];
+  float cy = info_msg->K[5];
+
+  for (unsigned index = 0; index < depth_msg->height * depth_msg->width; ++index)
+  {
+    float i = input_data[index];
+    float u = cx - index%depth_msg->width;
+    float v = cy - index/depth_msg->width;
+    //float i_fitted =  i*disp_coeff + u_coeff*u*u + v_coeff*v*v;
+    float disparity = disp_coeff * SHIFT_SCALE * (shift_offset - i) + u_coeff*u*u + v_coeff*v*v;
+    float i_fitted = shift_offset - (disparity / SHIFT_SCALE);
+    if (0 < i_fitted){
+      depth_data[index] = i_fitted;
+    }else{
+      depth_data[index] = 0;
+    }
+  }
+
+  pub_depth_.publish(depth_msg);
+}
+
+} // namespace depth_image_proc
+
+// Register as nodelet
+#include <pluginlib/class_list_macros.h>
+PLUGINLIB_DECLARE_CLASS (depth_image_proc, undistort, depth_image_proc::UndistortNodelet, nodelet::Nodelet);
diff -r d8164bcedd91 openni_launch/launch/includes/depth.launch
--- a/openni_launch/launch/includes/depth.launch	Fri Jan 13 16:29:51 2012 -0800
+++ b/openni_launch/launch/includes/depth.launch	Thu Jul 12 20:50:41 2012 +0900
@@ -17,10 +17,15 @@
     <param name="interpolation" value="0" />
   </node>
 
+  <node pkg="nodelet" type="nodelet" name="undistort"
+        args="load depth_image_proc/undistort $(arg manager) $(arg bond)">
+    <remap from="image_raw" to="image_rect_raw" />
+  </node>
+
   <!-- Rectified depth image -->
   <node pkg="nodelet" type="nodelet" name="metric_rect"
         args="load depth_image_proc/convert_metric $(arg manager) $(arg bond)">
-    <remap from="image_raw" to="image_rect_raw" />
+    <remap from="image_raw" to="image_fitted" />
     <remap from="image"     to="image_rect" />
   </node>
   
@@ -32,7 +37,7 @@
   <node if="$(arg points_xyz)"
 	pkg="nodelet" type="nodelet" name="points"
         args="load depth_image_proc/point_cloud_xyz $(arg manager) $(arg bond)">
-    <remap from="image_rect" to="image_rect_raw"/>  <!-- Use raw image for efficiency -->
+    <remap from="image_rect" to="image_fitted"/>  <!-- Use raw image for efficiency -->
   </node>
 
 </launch>
diff -r d8164bcedd91 openni_launch/launch/includes/depth_registered.launch
--- a/openni_launch/launch/includes/depth_registered.launch	Fri Jan 13 16:29:51 2012 -0800
+++ b/openni_launch/launch/includes/depth_registered.launch	Thu Jul 12 20:50:41 2012 +0900
@@ -20,8 +20,8 @@
     <!-- Explicit topic remappings, shouldn't need all of these -->
     <remap from="rgb/camera_info"             to="$(arg rgb)/camera_info" />
     <remap from="depth/camera_info"           to="$(arg depth)/camera_info" />
-    <remap from="depth/image_rect"            to="$(arg depth)/image_rect_raw" />
-    <remap from="depth_registered/image_rect" to="$(arg depth_registered)/image_rect_raw" />
+    <remap from="depth/image_rect"            to="$(arg depth)/image_fitted" />
+    <remap from="depth_registered/image_rect" to="$(arg depth_registered)/image_fitted" />
   </node>
 
   <!-- Get all the usual depth topics -->
@@ -38,7 +38,7 @@
     <!-- Explicit topic remappings, shouldn't need all of these -->
     <remap from="rgb/image_rect_color"        to="$(arg rgb)/image_rect_color" />
     <remap from="rgb/camera_info"             to="$(arg rgb)/camera_info" />
-    <remap from="depth_registered/image_rect" to="$(arg depth_registered)/image_rect_raw" />
+    <remap from="depth_registered/image_rect" to="$(arg depth_registered)/image_fitted" />
     <remap from="depth_registered/points"     to="$(arg depth_registered)/points" />
   </node>
 
diff -r d8164bcedd91 openni_launch/launch/includes/device.launch
--- a/openni_launch/launch/includes/device.launch	Fri Jan 13 16:29:51 2012 -0800
+++ b/openni_launch/launch/includes/device.launch	Thu Jul 12 20:50:41 2012 +0900
@@ -49,14 +49,14 @@
   </include>
 
   <!-- Unregistered depth processing -->
-  <include file="$(find openni_launch)/launch/includes/depth.launch"
+  <include file="$(find depth_image_proc_jsk_patch)/launch/includes/depth.launch"
 	   ns="$(arg depth)">
     <arg name="manager" value="$(arg manager)" />
     <arg name="bond" value="$(arg bond)" />
   </include>
 
   <!-- Depth-to-RGB registration and processing -->
-  <include file="$(find openni_launch)/launch/includes/depth_registered.launch">
+  <include file="$(find depth_image_proc_jsk_patch)/launch/includes/depth_registered.launch">
     <arg name="manager" value="$(arg manager)" />
     <arg name="rgb" value="$(arg rgb)" />
     <arg name="depth" value="$(arg depth)" />
diff -r d8164bcedd91 openni_launch/launch/openni.launch
--- a/openni_launch/launch/openni.launch	Fri Jan 13 16:29:51 2012 -0800
+++ b/openni_launch/launch/openni.launch	Thu Jul 12 20:50:41 2012 +0900
@@ -19,6 +19,9 @@
   <arg name="rgb_camera_info_url"   default="" />
   <arg name="depth_camera_info_url" default="" />
 
+  <arg name="kinect_params_url" default="$(find openni_launch)/launch/includes/kinect_params.yaml"/>
+  <rosparam command="load" file="$(arg kinect_params_url)"/>
+
   <!-- Arguments for remapping "rgb", "depth", "depth_registered" namespaces -->
   <arg name="rgb"              default="rgb" />
   <arg name="ir"               default="ir" />
@@ -48,7 +51,7 @@
   <group ns="$(arg camera)">
 
     <!-- Load driver and processing nodelets in standard configuration -->
-    <include file="$(find openni_launch)/launch/includes/device.launch">
+    <include file="$(find depth_image_proc_jsk_patch)/launch/includes/device.launch">
       <!-- Could really use some syntactic sugar for this -->
       <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
       <arg name="device_id"             value="$(arg device_id)" />
